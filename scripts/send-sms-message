#!/usr/bin/env python

# send a SMS message
# Uses a config file for authentication and defaults

# Any arguments that are not options, are concatonated together
# with a single space separator to make up the message.  For eg:
#   send-sms-message test -r alfred gabba gabba -l main-DID hey
# will send "test gabba gabba hey" to 'alfred' from line 'main-DID'
# 'alfred' and 'main-DID' are aliases set in the config file.

# This needs the config module found on github.com under user rjwhite
#   https://github.com/rjwhite/Python-config-module

# Examples:
# send-sms-message --help
# send-sms-message --recipient 555-123-4567 pick up some butter-tarts
# send-sms-message -r my-wife "I sold the kids"

# Copyright 2019 RJ White
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------------------------------------------


import sys
import re
import os
import json
import urllib


version       = "v0.7"      # program version - not the package version
progname      = sys.argv[0]
debug_flag    = False
config_file   = None
config_module = "https://github.com/rjwhite/Python-config-module"
did_number    = ""          # the number we send the message FROM
timeout       = 40

home = None
try:
    home = os.environ[ 'HOME' ]
except Exception:
    sys.stderr.write( "{0}: could not get HOME environment variable\n". \
        format( progname ))
    sys.exit(1)

try:
    import requests
except ImportError as err:
    sys.stderr.write( "{0}: {1}\n".format( progname, err ))
    sys.stderr.write( "{0}: You may need to do a \'pip install requests\'\n". \
        format( progname ))
    sys.exit(1)

# need config module from https://github.com/rjwhite/Python-config-module

if home:
    sys.path.append( home + '/lib/python' )

try:
    import config
except ImportError as err:
    sys.stderr.write( "{0:s}: Please install config module\n". \
        format( progname ))
    sys.stderr.write( "{0:s}: can be obtained from {1:s}\n". \
        format( progname, config_module ))
    sys.exit(1)

# need way to quickly find out if we're Python version 2 or 3
PY2 = sys.version_info[0] == 2
PY3 = sys.version_info[0] == 3

class BadWebCall( Exception ): pass


# Find a config file to use.
# Passed a pathname of the last-ditch effort config file,
# which is likely the pathname given with the -c/--config
# option to the program.
# We accept the *last* *existing* config file from the list:
#   $HOME/.voip-ms.conf
#   environment variable VOIP_MS_CONFIG_FILE
#   the pathnane passed as an argument
#
# Arguments:
#   pathname
# Returns:
#   config-file  (could potentially be None)
# Exceptions:
#   KeyError
# Globals:
#   home

def find_config_file( str ):
    global home

    my_name = sys._getframe().f_code.co_name
    final_config = None

    # see if there is a config in the users HOME directory
    if home:
        pathname = home + '/' + ".voip-ms.conf"
        if os.path.isfile( pathname ):
            dprint( "{0}(): found config {1}".format( my_name, pathname ))
            final_config = pathname
        else:
            dprint( "{0}(): no config found in HOME".format( my_name ))

    # see if the user set an environment variable VOIP_MS_CONFIG_FILE
    try:
        pathname = os.environ[ 'VOIP_MS_CONFIG_FILE' ]
        if os.path.isfile( pathname ):
            dprint( "{0}(): found config via VOIP_MS_CONFIG_FILE: {1}". \
                format( my_name, pathname ))
            final_config = pathname
    except KeyError:
        dprint( "{0}(): environment variable VOIP_MS_CONFIG_FILE not set ". \
            format( my_name ))

    # see if the user gave a --config option and if the file exists
    if str:
        if os.path.isfile( str ):
            dprint( "{0}(): found config given by option: {1}". \
                format( my_name, str ))
            final_config = str
        else:
            dprint( "{0}(): config file given by option does not exist: {1}". \
                format( my_name, str ))

    if final_config:
        dprint( "{0}(): final config file to use: {1}". \
            format( my_name, final_config ))
    else:
        dprint( "{0}(): could not find a config file".format( my_name ))

    return( final_config )


# debug function if --debug|-d option given
#
# Arguments:
#   string to print
# Returns:
#   0
# Exceptions:
#   none

def dprint( str ):
    if debug_flag == False:
        return 0

    print( "debug: {0:s}".format( str ))
    return 0


# send a URL to the Voip.ms API
#
# Arguments:
#   1:  URL
# Returns:
#   JSON structure
# Exceptions:
#   BadWebCall
# Globals:
#   timeout

def send_request( url ):
    my_name = sys._getframe().f_code.co_name

    dprint( "{0:s}(): URL = {1:s}".format( my_name, url ))

    try:
        res = requests.get( url, timeout=timeout )
        json_data = res.text
        json_struct = json.loads( json_data )
        status = str( json_struct[ 'status' ] )
    except Exception as err:
        raise BadWebCall( "{0}(): {1}".format( my_name, err ))

    if status != 'success':
        raise BadWebCall( "{0:s}(): Failed status: {1:s}". \
            format( my_name, status ))

    dprint( "{0:s}(): status = {1:s}".format( my_name, status ))

    return( json_struct )


# print usage
#
# Arguments:
#   none
# Returns:
#   0
# Exceptions:
#   none
# Globals:
#   config_file, did_number, timeout

def usage():
    print( "usage: {} [option]* -r recipient message-to-send". \
        format( sys.argv[0] ))

    options = """\
    [-c|--config file]   (config-file. default={})
    [-d|--debug]         (debugging output)
    [-n|--no-send]       (don't send the message, but show URL to send)
    [-h|--help]          (help)
    [-l|--line phone]    (sender DID-phone-number. default={})
    [-s|--show-aliases]  (show any aliases set in config file)
    [-t|--timeout num]   (default={})
    [-V|--version]       (print version)
    -r|--recipient phone-number\
    """

    print( options.format( config_file, did_number, timeout ))

    return(0)


# main program
#
# Arguments:
#   none
# Returns:
#   0:  ok
#   1:  not ok
# Exceptions:
#   none

def main():
    global debug_flag, config_file, did_number, timeout

    # defaults

    line_number       = ""        # DID number to send message from
    recipient         = ""        # phone number to send messag to
    dont_send_flag    = False     # don't send the message, just print URL
    want_help_flag    = False     # set if -h/--help option used
    show_aliases_flag = False     # show any aliases set
    message = ""                  # the message to send.

    # process options

    num_args = len( sys.argv )
    i = 1
    while i < num_args:
        try:
            arg = sys.argv[i]

            m = re.match( '^-', arg )
            if not m:
                if message != "":
                    message = message + ' '
                message = message + arg

                i += 1
                continue

            if arg == '-d' or arg == '--debug':
                debug_flag = True
            elif arg == '-n' or arg == '--no-send':
                dont_send_flag = True
            elif arg == '-V' or arg == '--version':
                print( "version: {0:s}".format( version ))
                return(0)
            elif arg == '-c' or arg == '--config':
                i += 1
                config_file = sys.argv[i] 
            elif arg == '-r' or arg == '--recipient':
                i += 1
                recipient = sys.argv[i] 
            elif arg == '-l' or arg == '--line':
                i += 1
                did_number = sys.argv[i] 
            elif arg == '-t' or arg == '--timeout':
                i += 1
                timeout = sys.argv[i] 
                if not timeout.isdigit():
                    err = "timeout ({0:s}) is not non-numeric".format( timeout )
                    sys.stderr.write( "{0:s}: {1}\n".format( progname, err ))
                    return(1)
                timeout = int( timeout )
            elif arg == '-s' or arg == '--show-aliases':
                show_aliases_flag = True
            elif arg == '-h' or arg == '--help':
                want_help_flag = True
            else:
                sys.stderr.write( "{0:s}: no such option: {1:s}\n". \
                    format( progname, arg ) )
                return(1)

            i += 1
        except IndexError as err:
            sys.stderr.write( "{0:s}: missing value for option {1:s}\n". \
                format( progname, arg ))
            return(1)

    # find the config file we really want

    config_file = find_config_file( config_file ) ;
    if not config_file:
        sys.stderr.write( "{0}: could not find a config file\n". \
            format( progname ))
        return(1) ;
    dprint( "using config file: " + config_file )


    config.Config.set_debug( debug_flag )

    # no definitions file.  Our type info is all in our config file.
    try:
        conf = config.Config( config_file, '', AcceptUndefinedKeywords=True )
    except Exception as err:
        sys.stderr.write( "{0}: {1}\n".format( progname, err ))
        return(1)

    dprint( "Config data read OK.  double-plus woohoo." )

    # make sure we have our mandatory sections
    needed_sections = [ 'authentication', 'sms' ]
    sections = conf.get_sections()
    num_errs = 0
    for section in needed_sections:
        if section not in sections:
            num_errs += 1
            sys.stderr.write( "{0:s}: missing section \'{1:s}\' in {2:s}\n". \
                format( progname, section, config_file ))

    if num_errs:
        return(1)

    # make sure we have our mandatory keywords for authentication
    keywords_i_need = [ 'user', 'pass' ]
    keywords = conf.get_keywords( 'authentication' )
    for keyword in keywords_i_need:
        if keyword not in keywords:
            num_errs += 1
            err = "missing keyword \'{1:s}\' in section \'authentication\' in {2:s}". \
                format( keyword, config_file )
            sys.stderr.write( "{0:s}: {1:s}\n".format( progname, err ))

    if num_errs:
        return(1)

    # We know these exist from the above mandatory checks
    userid   = conf.get_values( 'authentication', 'user' )
    password = conf.get_values( 'authentication', 'pass' )

    dprint( "user = {0:s}".format( userid ))
    dprint( "pass = {0:s}".format( password ))

    # now get the line number we will send texts from
    try:
        did = conf.get_values( 'sms', 'did' )
    except ValueError as err:
        err = "Missing \'did\' keyword in section \'sms\' in {0:s}". \
            format( config_file )
        sys.stderr.write( "{0:s}: {1:s}\n".format( progname, err ))
        return(1)

    if did_number != "":
        msg = "preferring DID from option " + \
              " ({0:s}) over DID from config file ({1:s})". \
              format( did_number, did )
        dprint( msg )
    else:
        did_number = did

    dprint( "using DID \'{0:s}\' to send message from".format( did ))

    # now that we've resolved our DID number, whether from the config
    # file or an option, we can now properly print our usage if the
    # user asked for it

    if want_help_flag:
        usage()
        return(0)

    # see if there are aliases

    aliases = {}
    try:
        aliases = conf.get_values( 'sms', 'aliases' )
    except ValueError as err:
        pass

    # see if user wants to see any aliases set up in config file
    if show_aliases_flag:
        alias_keys = aliases.keys()
            
        max_len = 0
        # first get maximum length of aliases
        for key in alias_keys:
            alias = aliases[ key ]
            l = len( alias )
            if l > max_len:
                max_len = l

        max_len += 4        # add some spacing

        # now print them.  First sort the keys (aliases)
        sorted_aliases = list( aliases )
        sorted_aliases.sort()
        for key in sorted_aliases:
            alias = aliases[ key ]
            print( '{1:<{0}} {2}'.format( max_len, key, alias ))

        return(0)


    # sanity checking

    if recipient == "":
        sys.stderr.write( "{0:s}: need to provide --recipient option\n".
            format( progname ))
        num_errs += 1

    if message == "":
        sys.stderr.write( "{0:s}: need to provide a message to send\n".
            format( progname ))
        num_errs += 1

    if num_errs:
        return(1)

    dprint( "config file is {0:s}".format( config_file ))
    dprint( "message is now \"{0:s}\"".format( message ))
    dprint( "recipient is \'{0:s}\'".format( recipient ))
    dprint( "DID number is \'{0:s}\'".format( did_number ))


    if did_number in aliases:
        dprint( "found DID \'{0:s}\' in aliases!".format( did_number ))
        did_number = aliases[ did_number ]
        dprint( "DID number to send text FROM is now \'{0:s}\'". \
            format( did_number ))

    if recipient in aliases:
        dprint( "found recipient \'{0:s}\' in aliases!".format( recipient ))
        recipient = aliases[ recipient ]
        dprint( "recipient number to send text TO is now \'{0:s}\'". \
            format( recipient ))


    # now remove any spaces and dashes from the phone numbers

    recipient = recipient.replace( '-', '' )        # remove dashes
    recipient = recipient.replace( ' ', '' )        # remove dashes
    m = re.match( "^\d+$", recipient )
    if not m:
        err = "recipient phone number must be digits: \'{0:s}\'.". \
            format( recipient )
        sys.stderr.write( "{0:s}: {1:s}\n".format( progname, err ))
        return(1)

    did_number = did_number.replace( '-', '' )        # remove dashes
    did_number = did_number.replace( ' ', '' )        # remove dashes
    m = re.match( "^\d+$", did_number )
    if not m:
        err = "DID phone number must be digits: \'{0:s}\'.". \
            format( did_number )
        sys.stderr.write( "{0:s}: {1:s}\n".format( progname, err ))
        return(1)

    # we now have all the info we need to send the message

    # build the base URL

    base_url = "https://voip.ms/api/v1/rest.php" + \
            "?api_username={0:s}&api_password={1:s}". \
                format( userid, password )
    dprint( "BASE URL = " + base_url )

    # escape the message
    if PY2:
        message = urllib.quote( message )
    if PY3:
        message = urllib.parse.quote( message )


    # add to the rest of the URL
    method = 'sendSMS'
    url = base_url + "&method={0:s}&dst={1:s}&did={2:s}&message={3:s}". \
        format( method, recipient, did_number, message )

    if dont_send_flag:
        print( 'URL = ' + url )
        return(0)

    # send the request

    try:
        json_struct = send_request( url )
    except BadWebCall as err:
        sys.stderr.write( "{0:s}: {1:s}\n".format( progname, str(err)))
        return(1)

    # if we appeared to make the call ok, then we're done

    return 0


if main():
    sys.exit(1)
else:
    sys.exit(0)
